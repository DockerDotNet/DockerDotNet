// <auto-generated />
using System;
using DockerDotNet.WebServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DockerDotNet.WebServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DockerDotNet.WebServer.Models.Environment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.RoleEnvironment", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("EnvironmentId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "EnvironmentId");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("RoleEnvironments");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.RoleEnvironmentPermission", b =>
                {
                    b.Property<long>("RoleEnvironmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleEnvironmentEnvironmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleEnvironmentRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleEnvironmentId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleEnvironmentRoleId", "RoleEnvironmentEnvironmentId");

                    b.ToTable("RoleEnvironmentPermissions");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.UserEnvironment", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("EnvironmentId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "EnvironmentId");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("UserEnvironments");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.UserEnvironmentPermission", b =>
                {
                    b.Property<long>("UserEnvironmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserEnvironmentEnvironmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserEnvironmentUserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserEnvironmentId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserEnvironmentUserId", "UserEnvironmentEnvironmentId");

                    b.ToTable("UserEnvironmentPermissions");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.UserPermission", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.Environment", b =>
                {
                    b.HasOne("DockerDotNet.WebServer.Models.Group", "Group")
                        .WithMany("Environments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.RoleEnvironment", b =>
                {
                    b.HasOne("DockerDotNet.WebServer.Models.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DockerDotNet.WebServer.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.RoleEnvironmentPermission", b =>
                {
                    b.HasOne("DockerDotNet.WebServer.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DockerDotNet.WebServer.Models.RoleEnvironment", "RoleEnvironment")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleEnvironmentRoleId", "RoleEnvironmentEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("RoleEnvironment");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.RolePermission", b =>
                {
                    b.HasOne("DockerDotNet.WebServer.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DockerDotNet.WebServer.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.UserEnvironment", b =>
                {
                    b.HasOne("DockerDotNet.WebServer.Models.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DockerDotNet.WebServer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.UserEnvironmentPermission", b =>
                {
                    b.HasOne("DockerDotNet.WebServer.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DockerDotNet.WebServer.Models.UserEnvironment", "UserEnvironment")
                        .WithMany("Permissions")
                        .HasForeignKey("UserEnvironmentUserId", "UserEnvironmentEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UserEnvironment");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.UserPermission", b =>
                {
                    b.HasOne("DockerDotNet.WebServer.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DockerDotNet.WebServer.Models.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.UserRole", b =>
                {
                    b.HasOne("DockerDotNet.WebServer.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DockerDotNet.WebServer.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.Group", b =>
                {
                    b.Navigation("Environments");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.RoleEnvironment", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.User", b =>
                {
                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DockerDotNet.WebServer.Models.UserEnvironment", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
